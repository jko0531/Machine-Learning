function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %

    h = X * theta;
    error_ = h - y;
    error_with_x = error_.*X(:,2);
    theta(1) = theta(1) - alpha * (1/m) * sum([error_]);
    theta(2) = theta(2) - alpha * (1/m) * sum([error_with_x]);
    
    %total = 0;
    %total2 = 0;
    %for i = 1: m
    %    h_x = theta(1) + theta(2)*X(i,1);
    %    total2 = total2 + (h_x-y(i))*X(i,1);
    %    total = total + (h_x - y(i));
    %end
    %theta(1) = theta(1) - alpha*(1/m)*total;
    %theta(2) = theta(2) - alpha*(1/m)*total2;


    %computeCost(X, y, theta)



    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
